/*
 * Copyright (C) 2016 Source Allies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

File keystoreProperties = rootProject.file("keystore.properties")
def props = new Properties()
if (keystoreProperties.exists()) {
    props.load(new FileInputStream(keystoreProperties))
} else {
    props['keystorefile'] = 'none'
}

buildscript {

    ext.buildInfo = [
            'id'                : 'com.klinker.android.twitter_l',
            'name'              : '7.10.1',
            'number'            : System.getenv("BUILD_NUMBER") as Integer ?: 1458,
    ]

    ext.versions = [
            'gradlePlugin'      : '4.0.0',
            'targetSdk'         : 33,
            'minSdk'            : 21,

            'kotlin'            : '1.4.0',

            'androidX'          : '1.0.0',
            'playServices'      : '16.0.0',
            'firebaseCore'      : '16.0.4',
            'firebaseAnalytics' : '17.4.3',
    ]

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:${versions.gradlePlugin}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath 'com.google.gms:google-services:4.3.3'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.1.1'
    }

}

allprojects {

    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        flatDir { dirs 'lib' }
    }

}

// add the common project properties, to each app variant
subprojects {
    afterEvaluate { project ->
        if (project.hasProperty("android")) {

            android {
                compileSdkVersion versions.targetSdk

                defaultConfig {
                    targetSdkVersion versions.targetSdk
                    minSdkVersion versions.minSdk

                    versionName(buildInfo.name + '.' + buildInfo.number)
                    versionCode buildInfo.number

                    vectorDrawables.useSupportLibrary = true
                    multiDexEnabled true

                    resConfigs("en", "ar", "bg", "bg-rBG", "ca", "cs", "da", "de", "el", "es", "es-rES",
                            "fa", "fi", "fr", "fr-rFR", "he", "hi-rIN", "hu", "id", "it", "iw", "ja", "ko", "nb",
                            "nl", "pl", "pt-rBR", "pt-rPT", "ru", "th", "tr", "uk", "ur-rIN", "zh-rCN", "zh-rTW")
                }

                File keystore = new File(props['keystorefile'])
                if (keystore.exists()) {
                    signingConfigs {
                        debug {
                            storeFile file("Other/debug.keystore")
                            storePassword "android"
                            keyAlias "androiddebugkey"
                            keyPassword "android"
                        }
                        release {
                            storeFile keystore
                            storePassword props['keystorepassword']
                            keyAlias props['keyalias']
                            keyPassword props['keypassword']
                        }
                    }

                    buildTypes {
                        debug {
                            signingConfig signingConfigs.debug
                        }
                        release {
                            minifyEnabled true
                            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                            signingConfig signingConfigs.release
                        }
                    }
                } else {
                    signingConfigs {
                        debug {
                            storeFile file("Other/debug.keystore")
                            storePassword "android"
                            keyAlias "androiddebugkey"
                            keyPassword "android"
                        }
                    }
                    buildTypes {
                        debug {
                            signingConfig signingConfigs.debug
                        }
                    }
                }

                dexOptions {
                    jumboMode true
                    javaMaxHeapSize "4g"
                }

                packagingOptions {
                    exclude 'LICENSE'
                    exclude 'README.md'
                    exclude 'Other/'
                    exclude 'META-INF/LICENSE'
                    exclude 'META-INF/LICENSE.txt'
                    exclude 'META-INF/NOTICE'
                    exclude 'META-INF/DEPENDENCIES'
                    exclude 'META-INF/library_release.kotlin_module'
                }

                lintOptions {
                    ignore "InnerClasses"
                    abortOnError false
                }

                aaptOptions {
                    noCompress 'apk'
                }

                testOptions {
                    unitTests {
                        includeAndroidResources = true
                    }
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }

                sourceSets {
                    androidTest {
                        setRoot('src/test')
                    }
                }
            }
        }

    }
}
